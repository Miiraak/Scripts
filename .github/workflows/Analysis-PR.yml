name: Analysis on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  analyze-ps1:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find .ps1 files in PR (via GitHub API)
        id: ps1_files
        run: |
          files=$(curl -s -H "Authorization: Bearer ${{ secrets.AWSR }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" \
            | jq -r '.[].filename' | grep '\.ps1$' | paste -sd ';' -)
          echo "files=$files" >> $GITHUB_OUTPUT

      - name: Exit if no .ps1 files in PR
        if: steps.ps1_files.outputs.files == ''
        run: echo "No .ps1 files found in this PR, exiting."

      - name: Install PowerShell & PSScriptAnalyzer
        if: steps.ps1_files.outputs.files != ''
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
          pwsh -Command "Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser"

      - name: Analyze .ps1 files with PSScriptAnalyzer and format as Markdown
        if: steps.ps1_files.outputs.files != ''
        id: psa_report
        shell: pwsh
        run: |
          $files = '${{ steps.ps1_files.outputs.files }}'.Split(';', [System.StringSplitOptions]::RemoveEmptyEntries)
          $allResults = @()
          $errorCount = 0
          foreach ($file in $files) {
            if (Test-Path $file) {
              $results = Invoke-ScriptAnalyzer -Path $file | ForEach-Object {
                $sevString = if ($_.Severity -eq 0) {
                  'Info'
                } elseif ($_.Severity -eq 1) {
                  'Warning'
                } elseif ($_.Severity -eq 2) {
                  'Error'
                } else {
                  "$($_.Severity)"
                }
                [PSCustomObject]@{
                  ScriptName = $_.ScriptName
                  Line = $_.Line
                  RuleName = $_.RuleName
                  Severity = $sevString
                  Message = $_.Message
                }
              }
              $allResults += $results
              $errorCount += ($results | Where-Object Severity -eq 'Error').Count
            }
          }
          $md = @()
          $md += "## PSScriptAnalyzer Report for .ps1 files in this PR"
          $md += ""
          if ($allResults.Count -eq 0) {
            $md += "No issues detected."
          } else {
            $md += "| File | Line | Rule | Severity | Message |"
            $md += "| ---- | ---- | ---- | -------- | ------- |"
            foreach ($item in $allResults) {
              $file = $item.ScriptName
              $line = $item.Line
              $rule = $item.RuleName
              $severity = $item.Severity
              $msg = ($item.Message -replace '\|','\\|') -replace '\r?\n',' '
              if ($msg.Length -gt 120) { $msg = $msg.Substring(0,117) + '...' }
              $md += "| $file | $line | $rule | $severity | $msg |"
            }
          }
          $mdString = $md -join "`n"
          echo "psa_md<<EOF" >> $env:GITHUB_OUTPUT
          echo "$mdString" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT
          echo "error_count=$errorCount" >> $env:GITHUB_OUTPUT

      - name: Post PSScriptAnalyzer Markdown report to PR
        if: steps.ps1_files.outputs.files != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AWSR }}
          script: |
            const report = `${{ steps.psa_report.outputs.psa_md }}`;
            const pr = context.payload.pull_request.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body: report
            });

      - name: Fail if errors detected by PSScriptAnalyzer
        if: steps.ps1_files.outputs.files != '' && steps.psa_report.outputs.error_count != '0'
        run: |
          echo "PSScriptAnalyzer found ${{ steps.psa_report.outputs.error_count }} error(s) in .ps1 files."
          exit 1

  analyze-bash:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find .sh files in PR
        id: sh_files
        run: |
          files=$(curl -s -H "Authorization: Bearer ${{ secrets.AWSR }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" \
            | jq -r '.[].filename' | grep '\.sh$' | paste -sd ';' -)
          echo "files=$files" >> $GITHUB_OUTPUT

      - name: Exit if no .sh files in PR
        if: steps.sh_files.outputs.files == ''
        run: echo "No .sh files found in this PR, exiting."

      - name: Install ShellCheck
        if: steps.sh_files.outputs.files != ''
        run: sudo apt-get update && sudo apt-get install -y shellcheck

      - name: Analyze .sh files with ShellCheck
        if: steps.sh_files.outputs.files != ''
        id: sh_report
        run: |
          files=$(echo "${{ steps.sh_files.outputs.files }}" | tr ';' ' ')
          all_results=""
          error_count=0
          for file in $files; do
            if [ -f "$file" ]; then
              output=$(shellcheck -f gcc "$file" || true)
              if [ -n "$output" ]; then
                while IFS= read -r line; do
                  # Format: file:line:col: type: message
                  f=$(echo "$line" | cut -d: -f1)
                  l=$(echo "$line" | cut -d: -f2)
                  t=$(echo "$line" | cut -d: -f4 | sed 's/^ *//;s/ *$//')
                  m=$(echo "$line" | cut -d: -f5- | sed 's/^ *//;s/ *$//')
                  all_results+=$'| '"$f"' | '"$l"' | '"$t"' | '"${m//$'\n'/ }"$'\n'
                  [ "$t" = "error" ] && error_count=$((error_count+1))
                done <<< "$output"
              fi
            fi
          done
          md="## ShellCheck Report for .sh files in this PR"$'\n\n'
          if [ -z "$all_results" ]; then
            md+="No issues detected."
          else
            md+="| File | Line | Type | Message |\n| ---- | ---- | ---- | ------- |\n$all_results"
          fi
          echo "sh_md<<EOF" >> $GITHUB_OUTPUT
          echo "$md" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "error_count=$error_count" >> $GITHUB_OUTPUT

      - name: Post ShellCheck Report
        if: steps.sh_files.outputs.files != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.AWSR }}
          script: |
            const report = `${{ steps.sh_report.outputs.sh_md }}`;
            const pr = context.payload.pull_request.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body: report
            });

      - name: Fail if errors detected
        if: steps.sh_files.outputs.files != '' && steps.sh_report.outputs.error_count != '0'
        run: exit 1
