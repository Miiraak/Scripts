name: PowerShell Analysis

on:
  schedule:
    - cron: '0 8 * * *'
  workflow_dispatch:
  pull_request:
    paths:
      - '**/*.ps1'

jobs:
  scan-all:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PSScriptAnalyzer
        run: pwsh -Command "Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser"

      - name: Analyze all .ps1 scripts and output formatted markdown
        shell: bash
        run: |
          pwsh -Command "Invoke-ScriptAnalyzer -Path . -Recurse | ConvertTo-Json -Depth 5" > psa_result.json

          cat > format_psa.ps1 <<EOF
          \$results = Get-Content psa_result.json | ConvertFrom-Json
          \$md = @()
          \$md += '## PSScriptAnalyzer Results'
          \$md += ''
          if (\$results.Count -eq 0) {
            \$md += 'No issues detected.'
          } else {
            \$md += '| File | Line | Rule | Severity | Message |'
            \$md += '| ---- | ---- | ---- | -------- | ------- |'
            foreach (\$item in \$results) {
              \$file = if (\$item.ScriptName) { \$item.ScriptName } else { '' }
              \$line = if (\$item.Line) { \$item.Line } else { '' }
              \$rule = if (\$item.RuleName) { \$item.RuleName } else { '' }
              \$severity = switch (\$item.Severity) { 0 {'Info'}; 1 {'Warning'}; 2 {'Error'}; default { \$item.Severity } }
              \$msg = (\$item.Message -replace '\|','\\\\|') -replace '\r?\n',' '
              if (\$msg.Length -gt 120) { \$msg = \$msg.Substring(0,117) + '...' }
              \$md += "| \$file | \$line | \$rule | \$severity | \$msg |"
            }
          }
          Set-Content -Path psa_result.md -Value (\$md -join "`n")
          EOF

          pwsh -File format_psa.ps1

          echo '====== PSScriptAnalyzer Markdown Table ======'
          cat psa_result.md
          echo '============================================='

      - name: Generate FIXIT.md from analysis results
        shell: pwsh
        run: |
          $results = Get-Content psa_result.json | ConvertFrom-Json
          $categories = @{"Error"=@(); "Warning"=@(); "Info"=@()}
          foreach ($item in $results) {
            $sev = switch ($item.Severity) {
              0 {'Info'}
              1 {'Warning'}
              2 {'Error'}
              default {$item.Severity}
            }
            $cat = $categories[$sev]
            $cat += $item
            $categories[$sev] = $cat
          }

          function Format-Table ($items, $title) {
            if ($items.Count -eq 0) { return "`n### $title`n`n_No issues found under this category._`n" }
            $sorted = $items | Sort-Object ScriptName, Line
            $table = @()
            $table += "`n### $title`n"
            $table += "| File | Line | Rule | Message |"
            $table += "| ---- | ---- | ---- | ------- |"
            foreach ($item in $sorted) {
              $file = $item.ScriptName
              $line = $item.Line
              $rule = $item.RuleName
              $msg = ($item.Message -replace '\|','\\|') -replace '\r?\n',' '
              if ($msg.Length -gt 120) { $msg = $msg.Substring(0,117) + '...' }
              $table += "| $file | $line | $rule | $msg |"
            }
            return $table -join "`n"
          }

          $fixit = @()
          $fixit += "# PowerShell Script Issues Report"
          $fixit += "_This file is generated automatically by PowerShell Analysis workflow_"
          $fixit += ""

          $fixit += Format-Table $categories['Error'] "Errors"
          $fixit += Format-Table $categories['Warning'] "Warnings"
          $fixit += Format-Table $categories['Info'] "Info"

          Set-Content -Path FIXIT.md -Value ($fixit -join "`n")

      - name: Commit and push FIXIT.md if changed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          BRANCH=${{ github.ref_name }}
          if git diff --quiet FIXIT.md; then
            echo "No changes to FIXIT.md."
          else
            git add FIXIT.md
            git commit -m "Update FIXIT.md from scheduled/dispatch PSScriptAnalyzer scan"
            git pull --rebase origin "$BRANCH"
            git push origin HEAD:"$BRANCH"
          fi

  pr-powershell-analysis:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PSScriptAnalyzer
        run: pwsh -Command "Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser"

      - name: List changed .ps1 files in PR
        id: files
        run: |
          git fetch origin ${{ github.base_ref }}
          CHANGED=$(git diff --name-only origin/${{ github.base_ref }} ${{ github.sha }} | grep -E '\.ps1$' || true)
          echo "changed_ps1<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Run PSScriptAnalyzer on changed files
        id: psa
        run: |
          FILES="${{ steps.files.outputs.changed_ps1 }}"
          if [ -z "$FILES" ]; then
            echo "No changed PowerShell files to analyze."
            echo "psa_md<<EOF" >> $GITHUB_OUTPUT
            echo "## PSScriptAnalyzer Results" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "No PowerShell files changed in this PR." >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "$FILES" | xargs pwsh -Command "Invoke-ScriptAnalyzer -Path \$args -Recurse | ConvertTo-Json -Depth 5" > psa_result.json

          cat > format_psa.ps1 <<EOF
          \$results = Get-Content psa_result.json | ConvertFrom-Json
          \$md = @()
          \$md += '## PSScriptAnalyzer Results'
          \$md += ''
          if (\$results.Count -eq 0) {
            \$md += 'No issues detected.'
          } else {
            \$md += '| File | Line | Rule | Severity | Message |'
            \$md += '| ---- | ---- | ---- | -------- | ------- |'
            foreach (\$item in \$results) {
              \$file = if (\$item.ScriptName) { \$item.ScriptName } else { '' }
              \$line = if (\$item.Line) { \$item.Line } else { '' }
              \$rule = if (\$item.RuleName) { \$item.RuleName } else { '' }
              \$severity = switch (\$item.Severity) { 0 {'Info'}; 1 {'Warning'}; 2 {'Error'}; default { \$item.Severity } }
              \$msg = (\$item.Message -replace '\|','\\\\|') -replace '\r?\n',' '
              if (\$msg.Length -gt 120) { \$msg = \$msg.Substring(0,117) + '...' }
              \$md += "| \$file | \$line | \$rule | \$severity | \$msg |"
            }
          }
          Set-Content -Path psa_result.md -Value (\$md -join "`n")
          EOF

          pwsh -File format_psa.ps1

          echo "psa_md<<EOF" >> $GITHUB_OUTPUT
          cat psa_result.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment PR with results
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.psa.outputs.psa_md }}
